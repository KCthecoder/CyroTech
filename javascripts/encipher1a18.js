// Generated by CoffeeScript 1.3.3
(function() {
  var $, Encipher, GUI, LinkFormat, Popup, TextFormat, getCookie, setCookie,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  GUI = function(encipher) {
    return " \n<style>\n.encipher-key, .encipher-text, .encipher-tab, .encipher-link, .encpher-popup {\n    font-size: 14px;\n    font-family: Arial;\n    margin: 0px;\n    padding: 0px;\n}\n\n.encipher-popup {\n    text-align: left;\n    display: none;\n    position: fixed;\n    z-index: 9999;\n    background: #355664;\n    border: solid gray 1px; \n    -moz-border-radius: 10px; \n    -webkit-border-radius: 10px; \n    border-radius: 10px;\n    top: 50%;\n    left: 50%;\n    padding: 5px;\n    height: 90px;\n    width: 390px;\n    margin-top: -50px;\n    margin-left: -200px;\n}\n\n.encipher-key {\n    display: block;\n    width: 100%;\n    margin-top: 10px;\n}\n\n.encipher-key-input {\n    border: 0 !important;\n    background-color: white !important;\n    padding: 0 !important;\n    margin: 0 !important;\n    padding-left: 3px !important;\n    width: 100% !important;\n    height: 25px !important;\n    line-height: 25px;\n    -moz-border-radius: 4px; \n    -webkit-border-radius: 4px; \n    border-radius: 4px;\n}\n\n.encipher-text {\n    display: inline-block;\n    padding: 3px;\n    color:#fff;\n    text-decoration: none;\n    text-align: left;\n}\n\n#encipher-message {\n    font-weight: bold;\n    padding: 10px 3px 3px 3px;\n}\n\n.encipher-icon {\n    -moz-border-radius: 16px; \n    -webkit-border-radius: 16px; \n    border-radius: 16px;\n    display: inline-block;\n    float: right;\n    margin: 0;\n    padding: 4px;\n    width: 16px;\n    height: 16px;\n    cursor: pointer;\n}\n\n.encipher-icon:hover {\n    background-color: #213e4a;\n}\n\n.encipher-settings {\n    background: url(" + encipher.home + "/images/settings-white.png) no-repeat center center;\n}\n\n.encipher-tab-settings {\n    position: absolute;\n    top: 10px;\n    bottom: 0px;\n    right: 0px;\n    left: 0px;\n}\n\n.encipher-close {\n    background: url(" + encipher.home + "/images/close-white.png) no-repeat center center;\n}\n\n.encipher-key-mode {\n    display: block;\n    padding: 4px;\n    margin: 0px;\n    width: 16px;\n    height: 16px;\n    cursor: pointer;\n    position: relative;\n    top: -24px;\n    z-index: 10000;\n    float: right;\n    background: url(" + encipher.home + "/images/masked.png) no-repeat center center;\n}\n\n.encipher-key-mode-plain {\n    background: url(" + encipher.home + "/images/unmasked.png) no-repeat center center !important;\n}\n\n.encipher-link {\n    position: absolute;\n    bottom: 12px;\n    text-align: right;\n    display: block;\n    float: right;\n    display: inline-block;\n    margin: 0;\n    padding: 0;\n    padding-left: 20px;\n    cursor: pointer;\n    color:#0196E3;\n    font-size: 14px;\n    font-family:Arial, Helvetica, sans-serif; \n    font-weight: bold;\n}\n\n.encipher-link:hover {\n    text-decoration: underline;\n}\n\n#encipher-it {\n    background: url(" + encipher.home + "/images/encrypt-white.png) no-repeat center left;\n    right: 5px;\n}\n\n.encipher-yes {\n    background: url(" + encipher.home + "/images/settings-white.png) no-repeat center left;\n    right: 5px;\n}\n\n.encipher-no {\n    background: url(" + encipher.home + "/images/close-white.png) no-repeat center left;\n    right: 85px;\n}\n\n.encipher-option {\n    float: left;\n    clear: both;\n}\n\n.encipher-expire {\n    height: 25px !important;\n}\n\n</style>\n\n<div class='encipher-popup'>\n    <div class='encipher-icon encipher-close'></div>\n    <div class='encipher-tab encipher-tab-key'>\n        <div class='encipher-icon encipher-settings'></div>\n        <div class='encipher-text encipher-title'></div>\n        <div class='encipher-key'>\n            <input type='text' class='encipher-key-input' id='encipher-key-plain' style='display: none;'/>\n            <input type='password' class='encipher-key-input' id='encipher-key-pass'/>\n            <div class='encipher-key-mode'></div>\n        </div>\n        <div class='encipher-link' id='encipher-it'>Encipher It</div>\n    </div>\n    <div class='encipher-tab encipher-tab-settings'>\n        <div class='encipher-text encipher-option'>Convert encrypted text into short link?</div>\n        <div class='encipher-text encipher-option'><input type='checkbox' class='encipher-always'>&nbsp;Do not ask next time</div>\n        <div class='encipher-text encipher-option'>\n            <select class='encipher-expire'>\n                <option value=\"31557600\">Delete after 1 year</option>\n                <option value=\"2629800\">Delete after 1 month</option>\n                <option value=\"604800\">Delete after 1 week</option>\n                <option value=\"86400\">Delete after 1 day</option>\n                <option value=\"3600\">Delete after 1 hour</option>\n                <option value=\"300\">Delete after 5 min</option>\n            </select>\n        </div>\n        <div class='encipher-link encipher-no'>No</div>\n        <div class='encipher-link encipher-yes'>Yes</div>\n    </div>\n    <div class='encipher-text' id='encipher-message'></div>\n</div>";
  };

  setCookie = function(name, value, days) {
    var date, expires;
    if (days) {
      date = new Date();
      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
      expires = "; expires=" + date.toGMTString();
    } else {
      expires = "";
    }
    return document.cookie = name + "=" + value + expires + "; path=/";
  };

  getCookie = function(c_name) {
    var c_end, c_start;
    if (document.cookie.length > 0) {
      c_start = document.cookie.indexOf(c_name + "=");
      if (c_start !== -1) {
        c_start = c_start + c_name.length + 1;
        c_end = document.cookie.indexOf(";", c_start);
        if (c_end === -1) {
          c_end = document.cookie.length;
        }
        return unescape(document.cookie.substring(c_start, c_end));
      }
    }
    return "";
  };

  Popup = (function() {

    function Popup(encipher) {
      var _this = this;
      this.encipher = encipher;
      this.hide = __bind(this.hide, this);

      this.input = __bind(this.input, this);

      $('body').append(GUI(this.encipher));
      this.frame = $('.encipher-popup');
      $('#encipher-key-plain').hide().val("");
      $('#encipher-key-pass').show().focus().val("");
      $('.encipher-key-mode').click(function() {
        var el, key;
        key = _this.key();
        $('#encipher-key-plain').toggle().val(key);
        $('#encipher-key-pass').toggle().val(key);
        el = $('.encipher-key-mode');
        if (el.hasClass('encipher-key-mode-plain')) {
          return el.removeClass('encipher-key-mode-plain');
        } else {
          return el.addClass('encipher-key-mode-plain');
        }
      });
      $('.encipher-close').click(function() {
        return _this.hide();
      });
      $('.encipher-settings').click(function() {
        return _this.settings(true, function() {
          $('.encipher-tab').hide();
          return $('.encipher-tab-key').show();
        });
      });
    }

    Popup.prototype.refresh = function() {
      if (this.key() !== '') {
        return $('#encipher-it').show();
      } else {
        return $('#encipher-it').hide();
      }
    };

    Popup.prototype.input = function(title, button, callback) {
      var _this = this;
      $('.encipher-key-input').val("").unbind().keyup(function(e) {
        $('#encipher-message').html(_this.score());
        if (e.which === 27) {
          return _this.hide();
        }
        if (e.which === 13 && _this.key()) {
          return callback(_this.key());
        }
        return _this.refresh();
      });
      $('.encipher-title').html(title);
      $('.encipher-tab').hide();
      $('.encipher-tab-key').show();
      $('.encipher-key-input:visible').focus();
      $('#encipher-it').html(button).unbind().bind('click', function() {
        return callback(_this.key());
      });
      this.message("<a class='encipher-text' href='" + this.encipher.base + "/plans' target='new'>Click here to upgrade</a>");
      this.refresh();
      return this.frame.show();
    };

    Popup.prototype.alert = function(message) {
      $('.encipher-tab').hide();
      $('.encipher-title').html("");
      this.message(message);
      this.refresh();
      return this.frame.show();
    };

    Popup.prototype.settings = function(show, callback) {
      var check, expire, mode,
        _this = this;
      $('.encipher-tab').hide();
      $('.encipher-tab-settings').show();
      this.message("");
      this.refresh();
      mode = getCookie('encipher-link');
      expire = getCookie('encipher-expire') || '31557600';
      $('.encipher-expire').val(expire).change(function() {
        return expire = setCookie('encipher-expire', $(this).val());
      });
      check = $('.encipher-always');
      if (mode === 'yes' || mode === 'no') {
        check.attr('checked', 'checked');
      }
      if (mode === 'yes' && !show) {
        return callback(true);
      }
      if (mode === 'no' && !show) {
        return callback(false);
      }
      $('.encipher-yes').unbind().bind('click', function() {
        if (check.is(':checked')) {
          setCookie('encipher-link', 'yes');
        } else {
          setCookie('encipher-link', 'ask');
        }
        return callback(true);
      });
      return $('.encipher-no').unbind().bind('click', function() {
        if (check.is(':checked')) {
          setCookie('encipher-link', 'no');
        } else {
          setCookie('encipher-link', 'ask');
        }
        return callback(false);
      });
    };

    Popup.prototype.message = function(message) {
      return $('#encipher-message').html(message);
    };

    Popup.prototype.hide = function() {
      return this.frame && this.frame.remove();
    };

    Popup.prototype.isVisible = function() {
      return this.frame && this.frame.is(':visible');
    };

    Popup.prototype.key = function() {
      if ($('#encipher-key-plain').is(':visible')) {
        return $('#encipher-key-plain').attr('value');
      } else {
        return $('#encipher-key-pass').attr('value');
      }
    };

    Popup.prototype.score = function() {
      var regexp, strength, value, _i, _len, _ref;
      value = this.key();
      strength = 1;
      _ref = [/{5\,}/, /[a-z]+/, /[0-9]+/, /[A-Z]+/];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        regexp = _ref[_i];
        if (value.match(regexp)) {
          strength++;
        }
      }
      if (value.length < 5) {
        strength = 1;
      }
      if (value.length > 8) {
        strength++;
      }
      if (value.length > 16) {
        strength++;
      }
      if (value.length > 16 && strength > 5) {
        strength = 5;
      }
      return ['<span style="color: #FF3030">Very weak key</span>', '<span style="color: #FF3030">Weak key</span>', 'Moderate key', 'Strong key', 'Strongest key'][strength - 1];
    };

    return Popup;

  })();

  TextFormat = (function() {

    function TextFormat(base) {
      this.base = base;
      this.HAS = /EnCt2/;
      this.EXTRACT = /(EnCt2.*IwEmS)/;
    }

    TextFormat.prototype.hasCipher = function(message) {
      if (!message) {
        return false;
      }
      return (message || "").match(this.HAS);
    };

    TextFormat.prototype.extractCipher = function(message) {
      var parts;
      parts = (message || "").replace(/[\n> ]/g, '').match(this.EXTRACT);
      if (parts) {
        return parts[1];
      } else {
        return false;
      }
    };

    TextFormat.prototype.pack = function(message, callback) {
      return callback(null, message.match(/.{0,80}/g).join('\n') + "\nDecrypt it at " + this.base);
    };

    TextFormat.prototype.unpack = function(message, callback) {
      message = this.extractCipher(message);
      if (message) {
        return callback(null, message);
      } else {
        return callback(new Error("Encrypted message not found"));
      }
    };

    return TextFormat;

  })();

  LinkFormat = (function(_super) {

    __extends(LinkFormat, _super);

    function LinkFormat(base) {
      this.base = base;
      base = base.replace(/([\:\.\/])/g, "\\$1");
      this.expire = "0";
      this.HAS = new RegExp("" + base + "[\\/]?\\?");
      this.EXTRACT = new RegExp("(" + base + "[\\/]?\\?[0-9A-Za-z\/\+]+)");
    }

    LinkFormat.prototype.pack = function(message, cb) {
      var _this = this;
      return $.post(this.base + "/pub", {
        body: message,
        expire: this.expire
      }, function(guid) {
        return cb(null, _this.base + '?' + guid);
      }).error(function() {
        return cb(new Error("Can't create link"));
      });
    };

    LinkFormat.prototype.unpack = function(message, cb) {
      var guid, url,
        _this = this;
      url = this.extractCipher(message);
      if (!url) {
        return cb(null, message);
      }
      guid = url.slice(url.indexOf('?') + 1);
      return $.post(this.base + "/pub", {
        guid: guid
      }, function(res) {
        return cb(null, res);
      }).error(function() {
        return cb(new Error("Can't expand link"));
      });
    };

    return LinkFormat;

  })(TextFormat);

  window.Encipher = Encipher = (function() {

    function Encipher(base, home) {
      this.base = base;
      this.home = home;
      this.base || (this.base = window.location.protocol + '//' + window.location.host);
      this.home || (this.home = this.base);
      this.cache = {};
      this.format = {
        text: new TextFormat(this.base),
        link: new LinkFormat(this.base)
      };
    }

    Encipher.prototype.findEncrypted = function() {
      var found, nodes, texts, traverse, traverseBody, _ref,
        _this = this;
      _ref = [[], []], nodes = _ref[0], texts = _ref[1];
      found = function(elem, txt) {
        var cipher;
        if (elem[0].nodeName.toLowerCase() === 'a') {
          elem = elem.parent();
        }
        cipher = _this.format.text.extractCipher(txt) || _this.format.link.extractCipher(txt);
        if (cipher) {
          nodes.push(elem);
          texts.push(cipher);
          return 1;
        } else {
          return 0;
        }
      };
      traverse = function(node) {
        var elem, i, skip, _i, _ref1;
        skip = 0;
        if (node.nodeType === 3 && (_this.format.text.hasCipher(node.data) || _this.format.link.hasCipher(node.data))) {
          elem = $(node.parentNode);
          skip = found(elem, elem.text());
        } else {
          if (node.nodeType === 1 && !/(script|style)/i.test(node.tagName)) {
            elem = $(node);
            if (/(input|textarea)/i.test(node.tagName) && elem.is(':visible')) {
              found(elem, elem.val());
            } else {
              if (node.childNodes) {
                for (i = _i = 0, _ref1 = node.childNodes.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
                  i += traverse(node.childNodes[i]);
                }
              }
            }
          }
        }
        return skip;
      };
      traverseBody = function(body) {
        body.each(function() {
          return traverse(this);
        });
        try {
          return body.find("iframe").each(function() {
            var iframe;
            iframe = $(this).get(0);
            if (iframe.src.indexOf(location.protocol + '//' + location.host) === 0 || iframe.src.indexOf('about:blank') === 0 || iframe.src === '') {
              try {
                return traverseBody($(this).contents().find('body'));
              } catch (e) {

              }
            }
          });
        } catch (e) {

        }
      };
      traverseBody($('body'));
      return [nodes, texts];
    };

    Encipher.prototype.findInput = function() {
      var node;
      node = $('div.editable[g_editable=true]:visible');
      if (node.length) {
        return [node, node.html()];
      }
      node = $('div.editable iframe').contents().find('body');
      if (node.length) {
        return [node, node.html()];
      }
      node = $('iframe.editable:visible').contents().find('body');
      if (node.length) {
        return [node, node.html()];
      }
      node = $('iframe.RichText').contents().find('body');
      if (node.length) {
        return [node, node.html()];
      }
      node = $('textarea[form=nosend]:visible');
      if (node.length) {
        return [node, node.val()];
      }
      node = $('iframe[name=compArea_test_]').contents().find('body');
      if (node.length) {
        return [node, node.html()];
      }
      node = $('textarea[name=txtbdy]');
      if (node.length === 1) {
        return [node, node.val()];
      }
      node = $('textarea:visible');
      if (node.length === 1) {
        return [node, node.val()];
      }
      return [void 0, void 0];
    };

    Encipher.prototype.parse = function() {
      var _ref, _ref1, _ref2;
      _ref = this.findEncrypted(), this.nodes = _ref[0], this.texts = _ref[1];
      _ref1 = this.findInput(), this.node = _ref1[0], this.text = _ref1[1];
      if (this.format.text.hasCipher(this.text) || this.format.link.hasCipher(this.text)) {
        _ref2 = [void 0, void 0], this.node = _ref2[0], this.text = _ref2[1];
      }
      this.encrypted = this.nodes.length > 0;
      return this.encrypted || this.node !== void 0;
    };

    Encipher.prototype.derive = function(password, salt, callback) {
      var cacheKey, pbkdf2,
        _this = this;
      cacheKey = password + salt;
      if (this.cache[cacheKey]) {
        return callback(this.cache[cacheKey]);
      }
      pbkdf2 = new PBKDF2(password, salt, 1000, 32);
      return pbkdf2.deriveKey(function(per) {
        _this.gui && _this.gui.message("Generating key: " + (Math.floor(per)) + "%");
        return _this.gui && _this.gui.progress && _this.gui.progress(Math.floor(per));
      }, function(key) {
        _this.cache[cacheKey] = key;
        return callback(key);
      });
    };

    Encipher.prototype.decryptNode = function(node, text, password, callback) {
      var _this = this;
      return this.unpack(text, function(error, text) {
        var hmac, salt;
        if (error) {
          return callback(null, false);
        }
        _this.updateNode(node, text);
        text = text.slice(5, text.length - 5);
        hmac = text.slice(0, 40);
        salt = text.slice(64, 72);
        text = text.slice(72);
        return _this.derive(password, salt, function(key) {
          text = Aes.Ctr.decrypt(text, key, 256);
          if (hex_hmac_sha1(key, text) === hmac) {
            _this.updateNode(node, text);
            return callback(null, true);
          } else {
            return callback(null, false);
          }
        });
      });
    };

    Encipher.prototype.decrypt = function(password, callback) {
      var i, next, success,
        _this = this;
      i = 0;
      success = false;
      next = function() {
        if (_this.nodes.length > i) {
          return _this.decryptNode(_this.nodes[i], _this.texts[i], password, function(error, res) {
            if (error) {
              return callback(error, false);
            }
            i += 1;
            success || (success = res);
            return next();
          });
        } else {
          _this.cache = {};
          return callback(null, success);
        }
      };
      return next();
    };

    Encipher.prototype.encrypt = function(password, callback) {
      var salt,
        _this = this;
      salt = Base64.random(8);
      return this.derive(password, salt, function(key) {
        var cipher, hmac;
        hmac = hex_hmac_sha1(key, _this.text);
        hmac += hmac.slice(0, 24);
        cipher = hmac + salt + Aes.Ctr.encrypt(_this.text, key, 256);
        return _this.format.text.pack("EnCt2" + cipher + "IwEmS", function(error, cipher) {
          if (!error) {
            _this.updateNode(_this.node, cipher);
          }
          _this.cache = {};
          return callback(error, cipher);
        });
      });
    };

    Encipher.prototype.updateNode = function(node, value) {
      if (node.is('textarea')) {
        return node.val(value.replace(/<(?:.|\n)*?>/gm, '\n'));
      } else {
        return node.html(value.replace(/\n/g, '<br/>'));
      }
    };

    Encipher.prototype.unpack = function(message, callback) {
      var _this = this;
      return this.format.link.unpack(message, function(err, message) {
        if (err) {
          return callback(err, message);
        }
        return _this.format.text.unpack(message, callback);
      });
    };

    Encipher.prototype.startup = function() {
      var _this = this;
      this.gui || (this.gui = new Popup(this));
      if (this.gui.isVisible()) {
        return this.gui.hide();
      } else {
        if (this.parse()) {
          if (this.text) {
            return this.gui.input("Enter encryption key", "Encipher It", function(key) {
              return _this.encrypt(key, function(error, cipher) {
                if (error) {
                  return _this.gui.alert(error.message);
                } else {
                  return _this.gui.settings(false, function(ok) {
                    if (ok) {
                      return _this.format.text.unpack(cipher, function(error, cipher) {
                        if (error) {
                          return _this.gui.alert(error.message);
                        } else {
                          _this.format.link.expire = $('.encipher-expire').val();
                          return _this.format.link.pack(cipher, function(error, cipher) {
                            if (error) {
                              return _this.gui.alert(error.message);
                            } else {
                              _this.updateNode(_this.node, cipher);
                              _this.gui.hide();
                              if (_this.success) {
                                return _this.success("link", cipher);
                              }
                            }
                          });
                        }
                      });
                    } else {
                      if (_this.success) {
                        _this.success("cipher", cipher);
                      }
                      return _this.gui.hide();
                    }
                  });
                }
              });
            });
          } else {
            if (this.encrypted) {
              return this.gui.input("Enter decryption key", "Decipher It", function(key) {
                return _this.decrypt(key, function(error, success) {
                  if (success) {
                    if (_this.success) {
                      _this.success("plain");
                    }
                    return _this.gui.hide();
                  } else {
                    if (error) {
                      return _this.gui.alert(error.message);
                    } else {
                      return _this.gui.message("Invalid key");
                    }
                  }
                });
              });
            } else {
              return this.gui.alert("Encrypted message not found");
            }
          }
        } else {
          return this.gui.alert("Message not found");
        }
      }
    };

    return Encipher;

  })();

}).call(this);
