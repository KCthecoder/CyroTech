// Generated by CoffeeScript 1.3.3

/*
Helper function to override system alerts
*/


(function() {
  var fixConsole, makeAlert;

  makeAlert = function(id, unsafe) {
    return function() {
      var b, message, node, timer;
      message = Array.prototype.slice.call(arguments).join(' ');
      node = $(id);
      b = node.show().find('b');
      if (unsafe) {
        b.html(message);
      } else {
        b.text(message);
      }
      node.click(function() {
        return node.hide();
      });
      return timer = setTimeout((function() {
        return node.fadeOut(2000, function() {
          return node.hide();
        });
      }), 7000);
    };
  };

  this.sysAlert = window.alert;

  this.alert = makeAlert('#alert');

  this.alertHtml = makeAlert('#alert', true);

  this.info = makeAlert('#info');

  this.infoHtml = makeAlert('#info', true);

  /*
  Format file size in human readable format
  */


  this.humanize = function(size) {
    var i, units;
    if (isNaN(size)) {
      size = 0;
    }
    units = [' bytes', ' Kb', ' Mb', ' Gb', ' Tb'];
    i = 0;
    while (size >= 1024) {
      size /= 1024;
      ++i;
    }
    if (i === 0) {
      return size + units[i];
    } else {
      if (size < 10.0) {
        return size.toFixed(2) + units[i];
      } else if (size < 100.0) {
        return size.toFixed(1) + units[i];
      } else {
        return size.toFixed(0) + units[i];
      }
    }
  };

  /*
  Set elements visibility or enable/disable button
  */


  this.setVisible = function(elements, value, force) {
    var el;
    el = $(elements);
    if (el.prop("tagName") === "BUTTON" && !force) {
      if (value) {
        el.removeClass('disabled');
        return el.attr("disabled", false);
      } else {
        el.attr("disabled", true);
        return el.addClass('disabled');
      }
    } else {
      if (value) {
        return $(elements).show();
      } else {
        return $(elements).hide();
      }
    }
  };

  fixConsole = function() {
    var util;
    global.sysConsole = global.console;
    global.console = {};
    util = require('util');
    return ['log', 'info', 'error'].forEach(function(key) {
      return global.console[key] = function() {
        var args;
        args = Array.prototype.slice.call(arguments, 0);
        return global.sysConsole[key](((typeof args[0] === 'string') && (args[0].indexOf('%') >= 0) ? util.format.apply(util, args) : args.reduce((function(p, c) {
          if (p) {
            return "" + p + " " + (util.inspect(c));
          } else {
            return util.inspect(c);
          }
        }), "")));
      };
    });
  };

  this.setCookie = function(name, value, days) {
    var date, expires;
    if (days) {
      date = new Date();
      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
      expires = "; expires=" + date.toGMTString();
    } else {
      expires = "";
    }
    return document.cookie = name + "=" + value + expires + "; path=/";
  };

  this.getCookie = function(c_name) {
    var c_end, c_start;
    if (document.cookie.length > 0) {
      c_start = document.cookie.indexOf(c_name + "=");
      if (c_start !== -1) {
        c_start = c_start + c_name.length + 1;
        c_end = document.cookie.indexOf(";", c_start);
        if (c_end === -1) {
          c_end = document.cookie.length;
        }
        return unescape(document.cookie.substring(c_start, c_end));
      }
    }
    return "";
  };

  if (typeof process !== "undefined") {
    fixConsole();
    if (!settings.DEBUG) {
      process.on('uncaughtException', function(err) {
        process.stderr.write(err.toString());
        process.stderr.write(err.stack);
        alert("Panic! " + err.toString());
        return setTimeout(function() {
          return info("OK, don't panic. It just fatal system error.");
        }, 5500);
      });
    }
  }

}).call(this);
