// Generated by CoffeeScript 1.3.3

/*
 Main application module
*/


(function() {
  var AccessCodeView, CHROME, Cloud, ContainerView, CopyButton, CopyView, DecipherView, EditorView, EncipherView, FileView, FilesHeaderView, ModalView, NODE, ProgressView, Safe, UnsupportedView, WEB, buff, clipboard, fs, gui, memstream, mime, openBrowser, path,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  NODE = typeof process === 'object';

  CHROME = typeof chrome === 'object' && typeof chrome.tabs === 'object';

  WEB = !(NODE || CHROME);

  if (NODE) {
    try {
      require('coffee-script');
    } catch (e) {

    }
    gui = require('nw.gui');
    clipboard = gui.Clipboard.get();
    fs = require('fs');
    memstream = require('memstream');
    mime = require('mime');
    path = require('path');
    buff = require('public/javascripts/zip-reader/buffer-io.js');
    Cloud = require('./public/javascripts/cloud').Cloud;
    Safe = require('./public/javascripts/safe').Safe;
    _.extend(Container.prototype, Safe.prototype);
    openBrowser = function(url) {
      return gui.Shell.openExternal(url);
    };
  } else {
    gui = clipboard = mime = path = false;
    Cloud = (function() {

      function _Class() {}

      return _Class;

    })();
    openBrowser = function(url) {
      return window.open(url, "_self");
    };
  }

  /*
  Text editor with copy/paste menu
  */


  EditorView = (function(_super) {

    __extends(EditorView, _super);

    function EditorView() {
      return EditorView.__super__.constructor.apply(this, arguments);
    }

    EditorView.prototype.el = 'textarea';

    EditorView.prototype.initialize = function() {
      if (gui) {
        return this.initContextMenu();
      }
    };

    EditorView.prototype.initContextMenu = function() {
      var editor, menu, onChange;
      onChange = this.options.onChange;
      menu = new gui.Menu();
      editor = this.$el;
      menu.append(new gui.MenuItem({
        label: 'Copy',
        click: function() {
          return document.execCommand('copy');
        }
      }));
      menu.append(new gui.MenuItem({
        label: 'Cut',
        click: function() {
          document.execCommand('cut');
          return onChange && onChange();
        }
      }));
      menu.append(new gui.MenuItem({
        label: 'Paste',
        click: function() {
          document.execCommand('paste');
          return onChange && onChange();
        }
      }));
      return this.$el.bind('contextmenu', function(ev) {
        ev.preventDefault();
        menu.popup(ev.x, ev.y);
        return false;
      });
    };

    return EditorView;

  })(Backbone.View);

  /*
  Modal dialogs
  */


  ModalView = (function(_super) {

    __extends(ModalView, _super);

    function ModalView() {
      return ModalView.__super__.constructor.apply(this, arguments);
    }

    ModalView.prototype.el = ".modal-dlg";

    ModalView.prototype.initialize = function() {
      var _this = this;
      return this.options.cancel = function() {
        return _this.close();
      };
    };

    ModalView.prototype.render = function() {
      var btn, xbtn,
        _this = this;
      $(document).keydown(function(e) {
        if (e.keyCode === 13) {
          _this.$el.find('.palette button:last').click();
          return false;
        }
        if (e.keyCode === 27 && _this.options.cancel) {
          _this.options.cancel();
          return false;
        }
        return true;
      });
      this.$(".close").click(function() {
        return _this.close();
      });
      this.$(".modal-title").html(this.options.title);
      this.$(".modal-content").html(this.options.body);
      btn = this.$(".ok-button");
      if (this.options.ok) {
        btn.show();
        btn.unbind('click').click(this.options.ok);
      } else {
        btn.hide();
      }
      btn = this.$(".cancel-button");
      xbtn = this.$(".x-close-button");
      if (this.options.cancel) {
        btn.show();
        btn.unbind('click').click(this.options.cancel);
        if (xbtn) {
          xbtn.unbind('click').click(this.options.cancel);
        }
      } else {
        btn.hide();
      }
      this.$el.modal();
      return this;
    };

    ModalView.prototype.message = function(msg) {
      return this.$(".modal-content").html(msg);
    };

    ModalView.prototype.title = function(text) {
      return this.$('.modal-title').text(text);
    };

    ModalView.prototype.show = function() {
      return this.render();
    };

    ModalView.prototype.close = function() {
      this.undelegateEvents();
      this.$el.modal("hide");
      $(document).unbind('keydown');
      this.$(".close").unbind('click');
      return $('.editor').focus();
    };

    return ModalView;

  })(Backbone.View);

  ProgressView = (function(_super) {

    __extends(ProgressView, _super);

    function ProgressView() {
      return ProgressView.__super__.constructor.apply(this, arguments);
    }

    ProgressView.prototype.el = '.progress-dlg';

    ProgressView.prototype.initialize = function() {
      this.progress(0, 'encrypt');
      return this.progress(0, 'upload');
    };

    ProgressView.prototype.progress = function(percents, type) {
      type || (type = 'encrypt');
      return this.$('#' + type + '-progress').css({
        width: percents + '%'
      });
    };

    return ProgressView;

  })(ModalView);

  AccessCodeView = (function(_super) {

    __extends(AccessCodeView, _super);

    function AccessCodeView() {
      return AccessCodeView.__super__.constructor.apply(this, arguments);
    }

    AccessCodeView.prototype.el = '.access-dlg';

    AccessCodeView.prototype.events = {
      'click .submit-button': 'onCode',
      'click .trial-button': 'onTrial',
      'click .download-button': 'onBuy',
      'keyup #access-code': "onChangeAccessCode"
    };

    AccessCodeView.prototype.initialize = function() {
      AccessCodeView.__super__.initialize.call(this);
      this.options.cancel = false;
      this.$('#serial-form').hide();
      setVisible('.trial-button', this.options.trial, true);
      return this.onChangeAccessCode();
    };

    AccessCodeView.prototype.onChangeAccessCode = function() {};

    AccessCodeView.prototype.onBuy = function() {
      var action;
      if (this.options.trial) {
        action = "/buy?utm_source=Full-version&utm_medium=Software&utm_campaign=Still-trial";
      } else {
        action = "/buy?utm_source=Full-version&utm_medium=Software&utm_campaign=End-trial";
      }
      return openBrowser(settings.BASE_URL + action);
    };

    AccessCodeView.prototype.onCode = function() {
      var code;
      this.$('#serial-form').show();
      code = this.$('#access-code').val() || "";
      if (!code) {
        return;
      }
      /*
              Hack here for free cloudless version!
              Send some cool to support@encipher.it and get special 'hack0r' plan for free!
      */

      if (this.options.validate && !this.options.validate(code)) {
        return alert("Serial key is invalid");
      } else {
        this.close();
        return this.options.ok && this.options.ok(code);
      }
    };

    AccessCodeView.prototype.onTrial = function() {
      return this.close();
    };

    return AccessCodeView;

  })(ModalView);

  UnsupportedView = (function(_super) {

    __extends(UnsupportedView, _super);

    function UnsupportedView() {
      return UnsupportedView.__super__.constructor.apply(this, arguments);
    }

    UnsupportedView.prototype.el = '.unsupported-dlg';

    UnsupportedView.prototype.events = {
      'click .download-button': 'onDownload'
    };

    UnsupportedView.prototype.onDownload = function() {
      return openBrowser(settings.BASE_URL + "/download");
    };

    return UnsupportedView;

  })(ModalView);

  this.CopyView = CopyView = (function(_super) {

    __extends(CopyView, _super);

    function CopyView() {
      this.onGmail = __bind(this.onGmail, this);

      this.onCopy = __bind(this.onCopy, this);

      this.render = __bind(this.render, this);
      return CopyView.__super__.constructor.apply(this, arguments);
    }

    CopyView.prototype.el = '.copy-dlg';

    CopyView.prototype.events = {
      'click .gmail': 'onGmail',
      'click .copy-button': 'onCopy'
    };

    CopyView.prototype.initialize = function() {
      var _this = this;
      CopyView.__super__.initialize.call(this);
      this.textarea = this.$('.copy-content');
      if (!clipboard) {
        this.button = new CopyButton({
          el: '#copy-button'
        });
        return this.button.on('done', function() {
          return _this.done();
        });
      } else {
        return this.button = null;
      }
    };

    CopyView.prototype.content = function(text) {
      this.textarea.val(text);
      if (this.button) {
        this.button.set(text);
      }
      return this;
    };

    CopyView.prototype.render = function() {
      CopyView.__super__.render.call(this);
      this.textarea.height(16);
      this.textarea.height(this.textarea[0].scrollHeight);
      if (!((this.button && this.button.flash) || NODE || CHROME)) {
        $('.copy-button').remove();
        this.textarea.focus();
        this.textarea.select();
        this.textarea.removeAttr("readonly");
      } else {
        if (this.button && this.button.flash) {
          this.button.render();
          this.button.set(this.textarea.val());
        }
      }
      return this;
    };

    CopyView.prototype.onCopy = function() {
      if (clipboard) {
        clipboard.set(this.textarea.val());
      }
      if (CHROME) {
        this.textarea.focus();
        this.textarea.select();
        document.execCommand('SelectAll');
        document.execCommand("Copy", false, null);
      }
      return this.done();
    };

    CopyView.prototype.onGmail = function() {
      openBrowser("https://mail.google.com/mail/?view=cm&ui=2&tf=0&fs=1&to=&su=" + "&body=" + encodeURIComponent(this.textarea.val()));
      return this.done();
    };

    CopyView.prototype.done = function() {
      this.close();
      return this.options.ok && options.ok(this);
    };

    return CopyView;

  })(ModalView);

  /*
   Flash based copy button for WEB
  */


  CopyButton = (function(_super) {

    __extends(CopyButton, _super);

    function CopyButton() {
      this.set = __bind(this.set, this);
      return CopyButton.__super__.constructor.apply(this, arguments);
    }

    CopyButton.prototype.initialize = function() {
      this.clipboard = null;
      return this.flash = typeof FlashDetect !== 'undefined' && FlashDetect.majorAtLeast(9);
    };

    CopyButton.prototype.set = function(text, fmt) {
      return this.clipboard && this.clipboard.setText(text);
    };

    CopyButton.prototype.render = function() {
      var _this = this;
      if (this.flash && !this.clipboard) {
        this.clipboard = new ZeroClipboard.Client();
        this.clipboard.glue(this.$el.attr('id'), this.$el.parent().attr('id'));
        this.clipboard.addEventListener('onMouseDown', function() {
          return _this.trigger('init', _this);
        });
        return this.clipboard.addEventListener('onComplete', function() {
          return _this.trigger('done', _this);
        });
      }
    };

    return CopyButton;

  })(Backbone.View);

  /*
   Files table header view
  */


  FilesHeaderView = (function(_super) {

    __extends(FilesHeaderView, _super);

    function FilesHeaderView() {
      return FilesHeaderView.__super__.constructor.apply(this, arguments);
    }

    FilesHeaderView.prototype.tagName = "tr";

    FilesHeaderView.prototype.events = {
      "click th.filesaveall": "onSaveGroup",
      "click th.filedelall": "onDelGroup"
    };

    FilesHeaderView.prototype.initialize = function() {};

    FilesHeaderView.prototype.render = function() {
      var action, html;
      action = "";
      if (this.getState() === 0) {
        action = "<th class=\"filedelall\">&nbsp;</th>";
      }
      if (this.getState() === 2) {
        action = "<th class=\"filesaveall\">&nbsp;</th>";
      }
      html = "<th>&nbsp;</th>\n<th class=\"filename\">Filename</th>" + action + "<th class=\"filesize\">Size</th>\n<th class=\"filetype\">Type</th>";
      this.$el.html(html);
      return this;
    };

    FilesHeaderView.prototype.getState = function() {
      return this.parent.getState();
    };

    FilesHeaderView.prototype.onDelGroup = function(event) {
      this.parent.onRemove();
      return event.stopImmediatePropagation();
    };

    FilesHeaderView.prototype.onSaveGroup = function(event) {
      this.parent.onSaveAll();
      return event.stopImmediatePropagation();
    };

    return FilesHeaderView;

  })(Backbone.View);

  /*
   File entry view
  */


  FileView = (function(_super) {

    __extends(FileView, _super);

    function FileView() {
      this.render = __bind(this.render, this);
      return FileView.__super__.constructor.apply(this, arguments);
    }

    FileView.prototype.tagName = "tr";

    FileView.prototype.events = {
      "click td.filecheck": "onCheck",
      "click td.filesave": "onSave",
      "click td.filedel": "onDel",
      "click td": "onSelect"
    };

    FileView.prototype.initialize = function() {
      this.model.on("change", this.render, this);
      return this.model.on("selected", this.mark, this);
    };

    FileView.prototype.render = function() {
      var action, html;
      action = "";
      if (this.getState() === 0) {
        action = "<td class=\"filedel\">&nbsp;</td>";
      }
      if (this.getState() === 2) {
        action = "<td class=\"filesave\">&nbsp;</td>";
      }
      html = ("<td class=\"filecheck\">&nbsp;</td>\n<td class=\"filename\">" + this.model.attributes.name + "</td>") + action + ("<td class=\"filesize\">" + (humanize(this.model.attributes.size)) + "</td>\n<td class=\"filetype\">" + this.model.attributes.type + "</td>");
      this.$el.html(html).attr("data-file", this.model.attributes.path);
      if (this.model.get("checked")) {
        this.$(".filecheck").addClass("checked");
      }
      return this;
    };

    FileView.prototype.getState = function() {
      return this.parent.getState();
    };

    FileView.prototype.mark = function(event) {
      this.$el.parent().find("tr").removeClass("selected");
      return this.$el.addClass("selected");
    };

    FileView.prototype.onCheck = function(event) {
      this.model.set("checked", !this.model.get("checked"));
      this.model.trigger("checked", this.model);
      return event.stopImmediatePropagation();
    };

    FileView.prototype.onSelect = function(event) {
      return this.model.select();
    };

    FileView.prototype.onDel = function(event) {
      this.model.select();
      this.parent.onRemove();
      return event.stopImmediatePropagation();
    };

    FileView.prototype.onSave = function(event) {
      this.model.select();
      this.parent.onSave();
      return event.stopImmediatePropagation();
    };

    return FileView;

  })(Backbone.View);

  EncipherView = (function(_super) {

    __extends(EncipherView, _super);

    function EncipherView() {
      this.onSaveRun = __bind(this.onSaveRun, this);

      this.onSave = __bind(this.onSave, this);

      this.onPGP = __bind(this.onPGP, this);
      return EncipherView.__super__.constructor.apply(this, arguments);
    }

    EncipherView.prototype.el = '.encipher-dlg';

    EncipherView.prototype.events = {
      "click button.do-encrypt": "onEncrypt",
      "click button.do-share": "onShare",
      "click button.do-save": "onSave",
      "change #save-enc-file": "onSaveRun",
      "click #use-pgp": "onPGP",
      "click #cloud-expire": "onExpireClick"
    };

    EncipherView.prototype.initialize = function() {
      EncipherView.__super__.initialize.call(this);
      $("#password").password("reset");
      this.parent = this.options.parent;
      if (!this.model.isPlainText()) {
        this.$('#use-pgp').attr('disabled', 'true').attr('checked', 'checked');
      } else {
        if (!NODE) {
          this.$('#use-pgp').removeAttr('checked').removeAttr('disabled');
        } else {
          this.$('#use-pgp').removeAttr('disabled').attr('checked', 'checked');
        }
      }
      return this.updateGUI();
    };

    EncipherView.prototype.onExpireClick = function() {
      return false;
    };

    EncipherView.prototype.onPGP = function() {
      if (!NODE) {
        return this.unsupported();
      }
      this.updateGUI();
      return true;
    };

    EncipherView.prototype.updateGUI = function() {
      setVisible(".do-encrypt", this.model.isPlainText(), true);
      return setVisible('.do-save', $('#use-pgp').is(":checked"), true);
    };

    EncipherView.prototype.unsupported = function() {
      infoHtml('This feature is supported in the <a href="/plans">full version</a> only');
      return false;
    };

    EncipherView.prototype.handleError = function(error, result) {
      if (error) {
        alert(error.message);
      } else {
        if (result) {
          new CopyView().content(result).render();
        }
      }
      return false;
    };

    EncipherView.prototype.password = function() {
      var passphrase;
      passphrase = this.$("#password").attr("value");
      if (!passphrase) {
        return this.handleError(new Error("The encryption password is empty"));
      }
      return passphrase;
    };

    EncipherView.prototype.onShare = function() {
      var options, passphrase;
      passphrase = this.password();
      if (!passphrase) {
        return;
      }
      this.close();
      options = {
        expire: parseInt($("#cloud-expire").val())
      };
      if ($('#use-pgp').is(":checked")) {
        return this.onCloud(passphrase, options, this.handleError);
      } else {
        return this.onWeb(passphrase, true, this.handleError);
      }
    };

    EncipherView.prototype.onEncrypt = function() {
      var passphrase;
      passphrase = this.password();
      if (!passphrase) {
        return;
      }
      this.close();
      if ($('#use-pgp').is(":checked")) {
        return this.onClipboard(passphrase, this.handleError);
      } else {
        return this.onWeb(passphrase, false, this.handleError);
      }
    };

    EncipherView.prototype.onSave = function() {
      if (!NODE) {
        return this.unsupported();
      }
      if (!this.password()) {
        return false;
      }
      return $("#save-enc-file").trigger('click');
    };

    EncipherView.prototype.onSaveRun = function() {
      var filename, passphrase;
      filename = $("#save-enc-file").attr("value");
      if (!filename) {
        return false;
      }
      passphrase = this.password();
      if (!password) {
        return false;
      }
      this.close();
      if (!path.extname(filename)) {
        filename = filename + settings.SAFE_EXT;
      }
      return this.onFile(passphrase, filename, this.handleError);
    };

    EncipherView.prototype.onWeb = function(password, makeLink, callback) {
      var encipher, modal,
        _this = this;
      encipher = new Encipher(settings.BASE_URL);
      encipher.text = $(".editor").val();
      encipher.node = $(".copy-content");
      modal = new ProgressView({
        title: "Enciphering",
        cancel: function() {
          return modal.close();
        }
      });
      modal.render();
      encipher.gui = {
        message: function(message) {
          return modal.message(message);
        },
        progress: function(progress) {
          return modal.progress(progress);
        }
      };
      return encipher.encrypt(password, function(error, cipher) {
        if (!makeLink || error) {
          modal.close();
          return callback(error, cipher);
        } else {
          encipher.format.link.expire = jQuery('#cloud-expire').val();
          return encipher.format.link.pack(cipher, function(error, cipher) {
            modal.close();
            return callback(error, cipher);
          });
        }
      });
    };

    EncipherView.prototype.onClipboard = function(passphrase, callback) {
      var _this = this;
      return this.model.encrypt(passphrase, function(err, reader) {
        var modal, out;
        if (err) {
          return alert(err.toString());
        }
        modal = new ProgressView({
          title: "Enciphering",
          cancel: function() {
            return reader.destroy();
          }
        });
        modal.render();
        out = new buff.BufferIO();
        reader.on('error', function(ex) {
          modal.close();
          return callback(ex);
        });
        reader.on('progress', function(percent) {
          return modal.progress(percent);
        });
        reader.out().on('data', function(data) {
          return out.write(data);
        });
        reader.out().on('end', function() {
          modal.close();
          return callback(null, out.data().toString("ascii"));
        });
        return reader.start();
      });
    };

    EncipherView.prototype.onFile = function(passphrase, dstFileName, callback) {
      var _this = this;
      return this.model.encrypt(passphrase, function(err, reader) {
        var done, modal;
        if (err) {
          return callback && callback(err);
        }
        modal = new ProgressView({
          title: "Enciphering",
          cancel: function() {
            return reader.destroy();
          }
        });
        modal.render();
        done = function(err, result) {
          done = null;
          modal.close();
          return callback && callback(err, result);
        };
        reader.on('error', function(ex) {
          return done && done(ex);
        });
        reader.on('progress', function(percent) {
          return modal.progress(percent);
        });
        reader.out().on('end', function() {
          modal.close();
          return done && done(null, dstFileName);
        });
        reader.out().pipe(fs.createWriteStream(dstFileName));
        return reader.start();
      });
    };

    EncipherView.prototype.onCloud = function(passphrase, options, callback) {
      var filename,
        _this = this;
      filename = this.parent.cloud.cache.allocate();
      return this.onFile(passphrase, filename, function(error) {
        var cbComplete, cbProgress, cbStart, modal, request, uploaded;
        if (error) {
          return callback && callback(error);
        }
        request = null;
        uploaded = function(error, url) {
          if (error === "Cancel") {
            request && request.abort();
          }
          return fs.unlink(filename, function(panic) {
            var message;
            modal.close();
            if (!error) {
              return callback(null, url);
            }
            if (error === "Cancel") {
              return callback(null, null);
            }
            if (error.tag === "access") {
              message = "You need to provide a new serial key, because:<br><b>" + error.message + "</b>";
              return _this.parent.onAccessCode(message, function(error, code) {
                return _this.parent.onEncipher();
              });
            } else {
              return callback(error);
            }
          });
        };
        modal = new ProgressView({
          title: "Uploading",
          cancel: function() {
            return uploaded && uploaded("Cancel");
          }
        });
        modal.render();
        cbStart = function(req) {
          return request = req;
        };
        cbProgress = function(p) {
          return modal.progress(p);
        };
        cbComplete = function(error, url) {
          return uploaded && uploaded(error, url);
        };
        return _this.parent.cloud.upload(settings.BASE_URL, filename, options, cbStart, cbProgress, cbComplete);
      });
    };

    return EncipherView;

  })(ModalView);

  DecipherView = (function(_super) {

    __extends(DecipherView, _super);

    function DecipherView() {
      return DecipherView.__super__.constructor.apply(this, arguments);
    }

    DecipherView.prototype.el = '.decipher-dlg';

    DecipherView.prototype.events = {
      "click .decipher-button": "onRun"
    };

    DecipherView.prototype.initialize = function() {
      DecipherView.__super__.initialize.call(this);
      this.parent = this.options.parent;
      $("#dec-password").password("reset");
      this.$("#dec-password").focus().val("");
      return $('#open-safe').val(null);
    };

    DecipherView.prototype.onRun = function() {
      var cipher, handleError, passphrase,
        _this = this;
      passphrase = this.$("#dec-password").attr("value");
      if (!passphrase) {
        return alert("The decryption password is empty");
      }
      handleError = function(error) {
        var modal;
        if (error) {
          alert(error.message);
          modal = new DecipherView({
            model: _this.model,
            parent: _this.parent,
            fileName: _this.options.fileName,
            ok: _this.options.ok
          });
          return modal.render();
        } else {
          _this.close();
          return _this.options.ok && _this.options.ok();
        }
      };
      if (this.options.fileName) {
        return this.onFile(passphrase, this.options.fileName, function(error) {
          if (error) {
            return alert(error.message);
          }
          _this.close();
          return _this.options.ok && _this.options.ok();
        });
      } else {
        cipher = $(".editor").val().replace(/^\s+|\s+$/g, '');
        if (!cipher) {
          return alert("The encrypted text is empty");
        }
        this.close();
        if (cipher.match(/^[0-9]+$/)) {
          cipher = settings.BASE_URL + '/' + cipher;
        }
        return this.onTextWeb(passphrase, cipher, function(error, plain, notfound) {
          if (notfound) {
            if (cipher.match(/^http[s]?\:\/\/.*/)) {
              return _this.onUrl(passphrase, cipher, handleError);
            } else {
              if (cipher.match(/BEGIN PGP MESSAGE/)) {
                return _this.onText(passphrase, cipher, handleError);
              } else {
                return handleError(new Error("Unknown cipher format"));
              }
            }
          } else {
            if (error) {
              return handleError(error);
            } else {
              return _this.parent.onEditorSave();
            }
          }
        });
      }
    };

    DecipherView.prototype.onTextWeb = function(password, cipher, callback) {
      var encipher, modal, node,
        _this = this;
      encipher = new Encipher(settings.BASE_URL);
      if (!(encipher.format.text.hasCipher(cipher) || encipher.format.link.hasCipher(cipher))) {
        return callback(new Error("Not encrypted"), null, true);
      }
      modal = new ProgressView({
        title: "Deciphering",
        cancel: function() {
          return modal.close();
        }
      });
      modal.render();
      encipher.gui = {
        message: function(message) {
          return modal.message(message);
        },
        progress: function(progress) {
          return modal.progress(progress);
        }
      };
      node = $('.editor');
      return encipher.decryptNode(node, cipher, password, function(error, success) {
        modal.close();
        if (success) {
          return callback(null);
        } else {
          return callback(error || new Error("Invalid password"));
        }
      });
    };

    DecipherView.prototype.onFile = function(passphrase, encFileName, callback) {
      var _this = this;
      if (!NODE) {
        return this.parent.onUnsupported();
      }
      return this.model.list(passphrase, encFileName, function(err, entries) {
        if (err) {
          return callback(new Error(err));
        }
        _this.model.reset(_.filter(_this.model.models, function(file) {
          return false;
        }));
        entries.forEach(function(entry) {
          return _this.parent.createFile({
            name: entry.name,
            type: entry.type,
            size: entry.size,
            arc: true
          });
        });
        info("The container is loaded");
        _this.parent.onHideHint();
        return callback(null);
      });
    };

    DecipherView.prototype.onText = function(passphrase, cipher, callback) {
      var filename;
      if (!NODE) {
        return this.parent.onUnsupported();
      }
      filename = this.parent.cloud.cache.lookup(new Date().toString());
      fs.writeFile(filename, cipher);
      return this.onFile(passphrase, filename, function(error) {
        var _this = this;
        fs.unlink(filename, function(ignore) {});
        return callback(error);
      });
    };

    DecipherView.prototype.onUrl = function(passphrase, url, callback) {
      var cbComplete, cbProgress, cbStart, downloaded, filename, modal, request,
        _this = this;
      if (!NODE) {
        return this.parent.onUnsupported();
      }
      request = null;
      downloaded = function(error) {
        var message;
        downloaded = null;
        modal.close();
        if (!error) {
          return _this.onFile(passphrase, filename, callback);
        }
        fs.unlink(filename, function(ignore) {});
        if (error === "Cancel") {
          request && request.abort();
          return callback(null);
        }
        if (error.tag === "access") {
          message = "You need to provide a new serial key, because:<br><b>" + error.message + "</b>";
          return _this.parent.onAccessCode(message, function(error, code) {
            return _this.parent.onDecipher();
          });
        } else {
          return callback(error);
        }
      };
      modal = new ProgressView({
        title: "Downloading",
        cancel: function() {
          return downloaded && downloaded("Cancel");
        }
      });
      modal.render();
      cbStart = function(req) {
        return request = req;
      };
      cbProgress = function(p) {
        return modal.progress(p);
      };
      cbComplete = function(err) {
        return downloaded && downloaded(err);
      };
      filename = this.parent.cloud.cache.lookup(url);
      return this.parent.cloud.download(url, filename, cbStart, cbProgress, cbComplete);
    };

    return DecipherView;

  })(ModalView);

  /*
  Main application view
  */


  ContainerView = (function(_super) {

    __extends(ContainerView, _super);

    function ContainerView() {
      this.onHelp = __bind(this.onHelp, this);
      return ContainerView.__super__.constructor.apply(this, arguments);
    }

    ContainerView.DECRIPTED = 0;

    ContainerView.ENCRIPTED_TEXT = 1;

    ContainerView.ENCRIPTED_FILE = 2;

    ContainerView.UNDEFINED = 3;

    ContainerView.prototype.el = $("html");

    ContainerView.prototype.events = {
      "click .encrypt": "onEncipher",
      "click .decrypt": "onDecipher",
      "click .help": "onHelp",
      "click .new": "onNewFile",
      "click .file": "onAddFile",
      "change #files": "onAddFileRun",
      "keyup .editor": "onEditorSave",
      "click .save-file": "onSave",
      "change #save-file": "onSaveRun",
      "click .save-folder": "onSaveAll",
      "change #save-folder": "onSaveAllRun",
      "click .delete": "onRemove",
      "click .open-safe": "onOpenSafe",
      "change #open-safe": "onOpenSafeRun",
      "click .close-safe": "onCloseSafe",
      "keydown .editor": "onHideHint",
      "click .main-hint": "onHideHint"
    };

    ContainerView.prototype.initialize = function() {
      var cipher, code,
        _this = this;
      this.model = new Container();
      this.model.on("reset", this.render, this);
      this.model.on("add", this.render, this);
      this.model.on("remove", this.render, this);
      this.cloud = new Cloud();
      this.encipher = new Encipher(settings.BASE_URL);
      this.editor = new EditorView({
        el: '.editor',
        onChange: function() {
          return _this.onEditorSave();
        }
      });
      $("[rel=popover]").popover();
      $("[rel=tooltip]").tooltip();
      $("input[type=password]").password();
      this.setState(ContainerView.UNDEFINED);
      if (NODE) {
        code = this.cloud.accessCode();
        if (!code) {
          this.cloud.generateAccessCode(settings.BASE_URL, function(err) {
            if (err) {
              return console.log(err.message);
            } else {
              return _this.checkAccessCode();
            }
          });
        } else {
          this.checkAccessCode();
        }
        this.parseCommandLine();
        return this.initDragDrop();
      } else {
        this.newFile();
        if (WEB) {
          cipher = $('#cipher').text();
          $('#cipher').remove();
          if (cipher) {
            $('textarea.editor').val(cipher);
            this.onHideHint();
            return this.onDecipher();
          }
        }
      }
    };

    ContainerView.prototype.checkAccessCode = function() {
      var _this = this;
      return;
      console.log(this.cloud.expire());
      console.log(new Date());
      if (this.cloud.expire() < new Date()) {
        return this.onAccessCode("<b>Your serial key has expired</b>.<br>Please purchase a serial key for another year.", function(code) {});
      } else {
        if (this.cloud.trial()) {
          return this.onTrial();
        }
      }
    };

    ContainerView.prototype.onHideHint = function() {
      setVisible(".main-hint", false);
      return $('textarea.editor').focus();
    };

    ContainerView.prototype.setState = function(mode) {
      var empties, encReady,
        _this = this;
      setVisible(".icon-add-file", mode === ContainerView.DECRIPTED || mode === ContainerView.UNDEFINED, true);
      setVisible(".icon-add-message", mode === ContainerView.DECRIPTED || mode === ContainerView.UNDEFINED, true);
      setVisible(".icon-delete", mode === ContainerView.DECRIPTED, true);
      setVisible(".encrypt", mode !== ContainerView.ENCRIPTED_TEXT, true);
      setVisible(".decrypt", mode === ContainerView.ENCRIPTED_TEXT, true);
      setVisible(".save-file", mode === ContainerView.ENCRIPTED_FILE && _.size(this.checkedFiles()) === 1, true);
      setVisible(".save-folder", mode === ContainerView.ENCRIPTED_FILE && _.size(this.checkedFiles()) > 1, true);
      setVisible(".icon-close-safe", mode === ContainerView.ENCRIPTED_FILE || mode === ContainerView.ENCRIPTED_TEXT, true);
      setVisible(".icon-open-safe", mode !== ContainerView.ENCRIPTED_TEXT, true);
      setVisible(".encrypt", mode === ContainerView.DECRIPTED, false);
      setVisible(".icon-delete", _.size(this.checkedFiles()) > 0);
      empties = _.filter(this.model.models, function(file) {
        return file.isText() && file.get('size') === 0;
      });
      encReady = _.filter(this.model.models, function(file) {
        return file.get('size') !== 0;
      });
      setVisible(".do-encrypt", _.size(encReady) === 1, true);
      if (this.header) {
        this.header.render();
      }
      return this.mode = mode;
    };

    ContainerView.prototype.getState = function() {
      var text;
      if (this.model.isEmpty()) {
        return ContainerView.UNDEFINED;
      }
      if (this.model.size() > 1) {
        return this.mode;
      }
      text = $(".editor").val();
      if (this.isPGPText(text) || this.isCipherText(text) || this.isCipherLink(text)) {
        return ContainerView.ENCRIPTED_TEXT;
      } else {
        return ContainerView.DECRIPTED;
      }
    };

    ContainerView.prototype.isPGPText = function(text) {
      return text.indexOf('-----BEGIN PGP MESSAGE-----') === 0;
    };

    ContainerView.prototype.isCipherText = function(text) {
      return this.encipher.format.text.hasCipher(text);
    };

    ContainerView.prototype.isCipherLink = function(text) {
      return this.encipher.format.link.hasCipher(text);
    };

    ContainerView.prototype.checkedFiles = function() {
      var _this = this;
      return _.filter(this.model.models, function(file) {
        return file.get("checked");
      });
    };

    ContainerView.prototype.initDragDrop = function() {
      var holder;
      window.ondragover = window.ondrop = function(e) {
        e.preventDefault();
        return false;
      };
      holder = $('body')[0];
      holder.ondragover = function() {
        this.className = 'hover';
        return false;
      };
      holder.ondragend = function() {
        this.className = '';
        return false;
      };
      return holder.ondrop = function(e) {
        var files, i, _i, _ref;
        e.preventDefault();
        if (e.dataTransfer && e.dataTransfer.files) {
          files = e.dataTransfer.files;
          for (i = _i = 0, _ref = files.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            info("Dropped file " + files[i].name);
          }
        }
        return false;
      };
    };

    ContainerView.prototype.parseCommandLine = function() {
      var files,
        _this = this;
      if (__indexOf.call(gui.App.argv, '--test') >= 0) {
        this.runUnitTests();
      }
      files = _.filter(gui.App.argv, fs.existsSync);
      if (!files.length) {
        return this.newFile();
      }
      if (files.length === 1 && path.extname(files[0]) === settings.SAFE_EXT) {
        return this.openContainer(files[0]);
      } else {
        files.forEach(function(arg) {
          return _this.createFile({
            path: arg,
            name: path.basename(arg),
            type: _this.type(arg),
            size: fs.statSync(arg).size
          });
        });
        return this.onEncipher();
      }
    };

    ContainerView.prototype.runUnitTests = function() {
      var Mocha, mocha;
      info("Running unit tests");
      Mocha = new require('mocha');
      mocha = new Mocha();
      mocha.addFile(path.join('test/gpg.coffee'));
      mocha.addFile(path.join('test/cloud.coffee'));
      return mocha.run(function(failures) {
        if (failures) {
          return alert("" + failures + " unit test(s) failed");
        }
      });
    };

    ContainerView.prototype.render = function() {
      var listNode, tblHeader,
        _this = this;
      tblHeader = $(".files-header").empty();
      listNode = $(".files-list").empty();
      this.header = null;
      if (_.size(this.model.models) > 1) {
        this.header = new FilesHeaderView({
          model: this.model
        });
        this.header.parent = this;
        tblHeader.append(this.header.render().$el);
      }
      this.model.models.forEach(function(file) {
        var view;
        view = new FileView({
          model: file
        });
        view.parent = _this;
        return listNode.append(view.render().$el);
      });
      return this;
    };

    ContainerView.prototype.type = function(file) {
      var def;
      def = 'binary/octet-stream';
      if (mime) {
        return mime.lookup(file, def);
      } else {
        return def;
      }
    };

    ContainerView.prototype.createFile = function(attrs) {
      var file;
      file = new File(attrs);
      this.model.setUniqueName(file);
      this.model.add(file);
      file.on("selected", this.onFileSelected, this);
      file.on("change", this.onFileChanged, this);
      return file.select();
    };

    ContainerView.prototype.onFileSelected = function(file) {
      this.model.selected = file;
      return this.onFileChanged(file);
    };

    ContainerView.prototype.onFileChanged = function(file) {
      var content, editor, manyFiles, selected, size,
        _this = this;
      selected = file && file === this.model.selected;
      editor = selected && file.isText() && (!file.isEncripted() || file.get("size") < settings.EDITABLE_CONTENT_MAX_SIZE);
      if (editor) {
        this.loadContent(file, function(err, content) {
          if (err) {
            setVisible(".editor-panel", false);
            return setVisible(".save-panel", true);
          } else {
            return $(".editor").val(content);
          }
        });
      }
      if (file) {
        size = file.get("size");
        $(".file-info").text("File: " + (file.get("name")) + ", " + (humanize(size)) + " (" + (file.get("type")) + ")");
      } else {
        $(".file-info").text("Content not selected");
      }
      content = $(".editor").val();
      setVisible(".editor-panel", editor);
      setVisible(".save-panel", !editor);
      manyFiles = _.size(this.model.models) > 1;
      setVisible(".files", manyFiles);
      if (manyFiles) {
        $(".textarea").css({
          "bottom": "50%"
        });
      } else {
        $(".textarea").css({
          "bottom": "0px"
        });
      }
      return this.setState(this.getState());
    };

    ContainerView.prototype.newFile = function() {
      return this.createFile({
        name: settings.DEFAULT_FILE,
        type: "text/plain",
        size: 0,
        content: ""
      });
    };

    ContainerView.prototype.loadContent = function(file, callback) {
      var content, done,
        _this = this;
      content = file.loadContent();
      if (content || file.get('size') === 0) {
        return callback(null, content);
      }
      done = function(err, content) {
        done = null;
        if (content) {
          file.set('content', content);
        }
        return callback(err, content);
      };
      if (!file.isEncripted()) {
        content = fs.readFileSync(file.get('path'));
        return done(null, content);
      }
      return this.model.extract(file.get("name"), function(err, reader) {
        var out;
        if (err) {
          return callback(err);
        }
        out = new buff.BufferIO();
        reader.on('error', function(ex) {
          return done && done(ex.toString());
        });
        reader.out().on('data', function(data) {
          return out.write(data);
        });
        reader.out().on('end', function() {
          return done && done(null, out.data().toString("ascii"));
        });
        return reader.start();
      });
    };

    ContainerView.prototype.onCloseSafe = function() {
      if (!NODE && _.size(this.model.models) > 0) {
        return this.onUnsupported();
      }
      this.model.reset(_.filter(this.model.models, function(file) {
        return false;
      }));
      this.newFile();
      return this.setState(ContainerView.UNDEFINED);
    };

    ContainerView.prototype.onNewFile = function() {
      if (!NODE && _.size(this.model.models) > 0) {
        return this.onUnsupported();
      }
      this.newFile();
      return this.setState(ContainerView.DECRIPTED);
    };

    ContainerView.prototype.onAddFile = function() {
      if (!NODE) {
        return this.onUnsupported();
      }
      return $("#files").click();
    };

    ContainerView.prototype.onAddFileRun = function(evt) {
      var _this = this;
      _.forEach(evt.target.files, function(file) {
        return _this.createFile(file);
      });
      return this.setState(ContainerView.DECRIPTED);
    };

    ContainerView.prototype.onOpenSafe = function() {
      if (!NODE) {
        return this.onUnsupported();
      }
      return $("#open-safe").click();
    };

    ContainerView.prototype.onOpenSafeRun = function() {
      var fileName;
      fileName = $("#open-safe").attr("value");
      if (!fileName) {
        return alert("The encrypted file is not selected");
      }
      return this.openContainer(fileName);
    };

    ContainerView.prototype.openContainer = function(fileName) {
      var modal, self,
        _this = this;
      self = this;
      modal = new DecipherView({
        model: this.model,
        parent: this,
        fileName: fileName,
        ok: function() {
          if (_.size(_this.model.models) > 1) {
            _this.model.models.forEach(function(file) {
              return file.set('checked', true);
            });
          }
          return self.setState(ContainerView.ENCRIPTED_FILE);
        }
      });
      return modal.render();
    };

    ContainerView.prototype.onSave = function() {
      if (!NODE) {
        return this.onUnsupported();
      }
      $('#save-file').val(null);
      return $("#save-file").click();
    };

    ContainerView.prototype.onSaveRun = function() {
      var dest, src,
        _this = this;
      src = this.checkedFiles()[0].get('name');
      dest = $('#save-file').attr('value');
      if (path.extname(src) && !path.extname(dest)) {
        dest = dest + path.extname(src);
      }
      return this.onSaveFile(src, dest, function(err) {
        if (err) {
          return alert(err.message);
        }
      });
    };

    ContainerView.prototype.onSaveAll = function() {
      if (!NODE) {
        return this.onUnsupported();
      }
      return $('#save-folder').click();
    };

    ContainerView.prototype.onSaveAllRun = function() {
      var destFolder, files, next,
        _this = this;
      files = this.checkedFiles();
      destFolder = $('#save-folder').attr('value');
      next = function() {
        var file, srcFileName;
        file = files.shift();
        if (file) {
          srcFileName = file.get('name');
          return _this.onSaveFile(srcFileName, "" + destFolder + "/" + srcFileName, function(err) {
            if (err) {
              alert(err.message);
            }
            return next();
          });
        }
      };
      return next();
    };

    ContainerView.prototype.onSaveFile = function(srcFileName, dstFileName, callback) {
      var _this = this;
      if (!dstFileName) {
        return callback(new Error("The destination file is not selected"));
      }
      return this.model.extract(srcFileName, function(err, reader) {
        var done, modal;
        if (err) {
          return callback(err);
        }
        modal = new ProgressView({
          title: "Deciphering",
          cancel: function() {
            return reader.destroy();
          }
        });
        modal.render();
        done = function(err) {
          done = null;
          modal.close();
          if (!err) {
            info("The '" + srcFileName + "' extracted successfuly");
          }
          return callback(err);
        };
        reader.on('error', function(ex) {
          return done && done(ex);
        });
        reader.on('progress', function(percent) {
          return modal.progress(percent, "upload");
        });
        reader.out().on('end', function() {
          return done && done(null);
        });
        reader.out().pipe(fs.createWriteStream(dstFileName));
        return reader.start();
      });
    };

    ContainerView.prototype.onEditorSave = function() {
      var content, size;
      if (this.model.selected && this.model.selected.isText()) {
        content = this.$(".editor").val();
        size = content.length;
        this.model.selected.set({
          content: content,
          size: size
        });
        return this.setState(this.getState());
      }
    };

    ContainerView.prototype.onRemove = function() {
      var modal,
        _this = this;
      modal = new ModalView({
        title: "Remove file from the encrypted container",
        body: "Do you really want to remove the checked file(s)?",
        cancel: function() {
          return modal.close();
        },
        ok: function() {
          _this.model.reset(_.filter(_this.model.models, function(file) {
            return !file.get("checked");
          }));
          if (_this.model.size() === 1) {
            _this.onFileSelected(_this.model.at(0));
          } else {
            _this.onFileSelected(null);
          }
          _this.setState(_this.getState());
          return modal.close();
        }
      });
      return modal.render();
    };

    ContainerView.prototype.onUnsupported = function() {
      var modal;
      modal = new UnsupportedView;
      modal.render();
      return false;
    };

    ContainerView.DAY_MS = 24 * 60 * 60 * 1000;

    ContainerView.prototype.onTrial = function() {
      var days, message, now,
        _this = this;
      now = new Date();
      days = Math.floor((this.cloud.expire().getTime() - now.getTime()) / (24 * 60 * 60 * 1000));
      message = "You are using a 14 day trial version of Encipher It.<br><b>You have " + days + " days left.</b>";
      return this.onAccessCode(message, function(err, code) {});
    };

    ContainerView.prototype.onAccessCode = function(msg, callback) {
      var modal,
        _this = this;
      modal = new AccessCodeView({
        accessCode: this.cloud.accessCode(),
        trial: this.cloud.trial() && this.cloud.expire() > new Date(),
        expire: this.cloud.expire(),
        validate: function(code) {
          return _this.cloud.validateAccessCode(code);
        },
        ok: function(code) {
          _this.cloud.accessCode(code);
          info("Activated serial key: " + code);
          window.location.reload();
          return callback && callback(null, code);
        }
      });
      modal.message(msg);
      modal.render();
      return false;
    };

    ContainerView.prototype.onHelp = function() {
      return openBrowser(settings.BASE_URL + '/help');
    };

    ContainerView.prototype.onEncipher = function() {
      var modal;
      modal = new EncipherView({
        model: this.model,
        parent: this
      });
      return modal.render();
    };

    ContainerView.prototype.onDecipher = function() {
      var modal;
      modal = new DecipherView({
        model: this.model,
        parent: this
      });
      return modal.render();
    };

    return ContainerView;

  })(Backbone.View);

  $(document).ready(function() {
    return window.view = new ContainerView();
  });

}).call(this);
