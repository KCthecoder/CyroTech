// Generated by CoffeeScript 1.3.3

/*
Backbone models for application
*/


(function() {
  var Container, File,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.File = File = (function(_super) {

    __extends(File, _super);

    function File() {
      return File.__super__.constructor.apply(this, arguments);
    }

    File.prototype.defaults = {
      checked: false
    };

    File.prototype.initialize = function() {};

    File.prototype.select = function() {
      var _this = this;
      this.collection.forEach(function(file) {
        return file.set("checked", file === _this);
      });
      this.collection.selected = this;
      this.trigger("selected", this);
      return this.trigger("checked", this);
    };

    File.prototype.isText = function() {
      return this.get("type") === "text/plain";
    };

    File.prototype.isEncripted = function() {
      return this.get('arc');
    };

    File.prototype.loadContent = function() {
      if (this.get('size') === 0) {
        return '';
      }
      return this.get('content');
    };

    return File;

  })(Backbone.Model);

  this.Container = Container = (function(_super) {

    __extends(Container, _super);

    function Container() {
      return Container.__super__.constructor.apply(this, arguments);
    }

    Container.prototype.initialize = function() {};

    Container.prototype.removeByPath = function(path) {
      this.models = _.filter(this.models, function(file) {
        return file.attributes.path !== path;
      });
      return this.trigger("change");
    };

    Container.prototype.isPlainText = function() {
      return this.length === 1 && this.at(0).get('type') === "text/plain";
    };

    Container.prototype.isEmpty = function() {
      return this.length === 0 || (this.isPlainText() && this.at(0).get('size') === 0);
    };

    Container.prototype.isExistFileName = function(file) {
      return _.some(this.models, function(item) {
        return item.get("name") === file.get("name");
      });
    };

    Container.prototype.setUniqueName = function(file) {
      var ext, index, original, path, _i;
      if (!this.isExistFileName(file)) {
        return true;
      }
      path = file.get("name");
      original = path.replace(/\.[^.]+$/, '');
      ext = path.match(/\.([0-9a-z]+)(?:[\?#]|$)/i);
      if (ext) {
        ext = ext[0];
      } else {
        ext = "";
      }
      for (index = _i = 1; _i <= 65536; index = ++_i) {
        file.set('name', "" + original + "." + index + ext);
        if (!this.isExistFileName(file)) {
          return true;
        }
      }
      return false;
    };

    return Container;

  })(Backbone.Collection);

}).call(this);
